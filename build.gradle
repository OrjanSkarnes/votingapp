plugins {
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.avast.gradle.docker-compose' version "0.14.2"
    id 'com.github.node-gradle.node' version '2.2.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}



dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.kafka:kafka-streams'
    implementation 'org.apache.kafka:kafka-clients'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'mysql:mysql-connector-java:8.0.28'
    implementation 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2:2.2.220'
    runtimeOnly 'mysql:mysql-connector-java'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation "org.apache.kafka:kafka-streams-test-utils:3.4.0"
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}

node {
    version = '20.6.1'
    download = true
    workDir = file("${project.projectDir}/frontend/nodejs")
    npmWorkDir = file("${project.projectDir}/frontend/npm")
    nodeModulesDir = file("${project.projectDir}/frontend")
}


task npmBuild(type: NpmTask) {
    dependsOn 'npmInstallDependencies'
    execOverrides {
        it.workingDir = 'frontend'
    }
    args = ['run', 'build']
}

task npmInstallDependencies(type: NpmTask) {
    dependsOn 'npmSetup'
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = 'frontend'
    }
    args = ['install']
}

task copyFrontendToBuild(type: Copy) {
    dependsOn 'npmBuild'
    from "$projectDir/frontend/build"
    into "$projectDir/src/main/resources/static"
}

//processResources {
//    dependsOn 'copyFrontendToBuild'
//}

